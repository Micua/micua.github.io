{"version":3,"sources":["assets/colors.js","components/Logo.js","components/Heading.js","components/Navigation.js","components/Background.js","components/App.js","serviceWorker.js","index.js"],"names":["useState","Date","now","type","setType","level","setLevel","console","log","colors","className","viewBox","onClick","Math","random","id","x","y","width","height","filterUnits","dx","dy","in","result","stdDeviation","in2","operator","values","fill","points","mask","filter","title","slogan","links","map","item","key","href","target","text","loading","setLoading","url","setUrl","useEffect","img","window","Image","innerWidth","document","documentElement","clientWidth","body","innerHeight","clientHeight","src","onload","classes","push","join","alt","siteMetadata","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f16bc27c.chunk.js","sourcesContent":["export default [\n  //  Gray\n  ['#f8f9fa', '#f1f3f5', '#e9ecef', '#dee2e6', '#ced4da', '#adb5bd', '#868e96', '#495057', '#343a40', '#212529'],\n  //  Red\n  ['#fff5f5', '#ffe3e3', '#ffc9c9', '#ffa8a8', '#ff8787', '#ff6b6b', '#fa5252', '#f03e3e', '#e03131', '#c92a2a'],\n  //  Pink\n  ['#fff0f6', '#ffdeeb', '#fcc2d7', '#faa2c1', '#f783ac', '#f06595', '#e64980', '#d6336c', '#c2255c', '#a61e4d'],\n  //  Grape\n  ['#f8f0fc', '#f3d9fa', '#eebefa', '#e599f7', '#da77f2', '#cc5de8', '#be4bdb', '#ae3ec9', '#9c36b5', '#862e9c'],\n  //  Violet\n  ['#f3f0ff', '#e5dbff', '#d0bfff', '#b197fc', '#9775fa', '#845ef7', '#7950f2', '#7048e8', '#6741d9', '#5f3dc4'],\n  //  Indigo\n  ['#edf2ff', '#dbe4ff', '#bac8ff', '#91a7ff', '#748ffc', '#5c7cfa', '#4c6ef5', '#4263eb', '#3b5bdb', '#364fc7'],\n  //  Blue\n  ['#e7f5ff', '#d0ebff', '#a5d8ff', '#74c0fc', '#4dabf7', '#339af0', '#228be6', '#1c7ed6', '#1971c2', '#1864ab'],\n  //  Cyan\n  ['#e3fafc', '#c5f6fa', '#99e9f2', '#66d9e8', '#3bc9db', '#22b8cf', '#15aabf', '#1098ad', '#0c8599', '#0b7285'],\n  //  Teal\n  ['#e6fcf5', '#c3fae8', '#96f2d7', '#63e6be', '#38d9a9', '#20c997', '#12b886', '#0ca678', '#099268', '#087f5b'],\n  //  Green\n  ['#ebfbee', '#d3f9d8', '#b2f2bb', '#8ce99a', '#69db7c', '#51cf66', '#40c057', '#37b24d', '#2f9e44', '#2b8a3e'],\n  //  Lime\n  ['#f4fce3', '#e9fac8', '#d8f5a2', '#c0eb75', '#a9e34b', '#94d82d', '#82c91e', '#74b816', '#66a80f', '#5c940d'],\n  //  Yellow\n  ['#fff9db', '#fff3bf', '#ffec99', '#ffe066', '#ffd43b', '#fcc419', '#fab005', '#f59f00', '#f08c00', '#e67700'],\n  //  Orange\n  ['#fff4e6', '#ffe8cc', '#ffd8a8', '#ffc078', '#ffa94d', '#ff922b', '#fd7e14', '#f76707', '#e8590c', '#d9480f']\n]\n","import React, { useState } from 'react'\n\nimport colors from '../assets/colors'\n\nimport './Logo.css'\n\nconst interval = 60 * 1000\n\nexport default () => {\n  const [type, setType] = useState(~~(Date.now() / interval) % 13)\n  const [level, setLevel] = useState(~~(Date.now() / (interval / 10)) % 10)\n\n  const handleChange = () => {\n    setType(~~(Math.random() * 13))\n    setLevel(~~(Math.random() * 10))\n  }\n\n  console.log(`%cOC- %c ${type} %c %c ${level} %c â†’ %c  `,\n    `color: ${colors[0][7]}`,\n    `border-radius: 4px; background: ${colors[type][7]}`,\n    '',\n    `border-radius: 4px; background: ${colors[0][level]}`,\n    '',\n    `border-radius: 4px; background: ${colors[type][level]}`\n  )\n\n  return (\n    <svg className='logo' viewBox='0 0 472 450' onClick={handleChange}>\n      <defs>\n        <filter id='shadow' x='-12.7%' y='-13.4%' width='125.4%' height='126.7%' filterUnits='objectBoundingBox'>\n          <feOffset dx='0' dy='0' in='SourceAlpha' result='offset-outer' />\n          <feGaussianBlur stdDeviation='20' in='offset-outer' result='blue-outer' />\n          <feComposite in='blue-outer' in2='SourceAlpha' operator='out' result='blue-outer' />\n          <feColorMatrix values='0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 1 0' type='matrix' in='blue-outer' />\n        </filter>\n      </defs>\n      <mask id='mask' fill='white'>\n        <polygon points='472 114.26 203.028853 335.74 407.1 335.74 472 449.48 64.9 449.48 0 335.74 268.971147 114.26 64.9 114.26 0 0.52 407.1 0.52' />\n      </mask>\n      <g mask='url(#mask)' fill={colors[type][level]}>\n        <rect x='0' y='0' width='472' height='449' />\n      </g>\n      <g mask='url(#mask)'>\n        <polygon points='0 335.74 64.9 449.48 472 114.26 407.1 0.52' filter='url(#shadow)' />\n      </g>\n    </svg>\n  )\n}\n","import React from 'react'\n\nimport './Heading.css'\n\nexport default ({ title, slogan }) => (\n  <>\n    <h1 className='title'>{title}</h1>\n    <p className='slogan'>{slogan}</p>\n  </>\n)\n","import React from 'react'\n\nimport './Navigation.css'\n\nexport default ({ links }) => (\n  <ul className='navigation'>\n    {links.map(item => (\n      <li key={item.href}>\n        <a href={item.href} target={item.target}>{item.text}</a>\n      </li>\n    ))}\n  </ul>\n)\n","import React, { useState, useEffect } from 'react'\n\nimport './Background.css'\n\n// `https://picsum.photos/${window.innerWidth}/${window.innerHeight}?random&blur`\n// `https://source.unsplash.com/random/${window.innerWidth}x${window.innerHeight}`\n\nexport default () => {\n  const [loading, setLoading] = useState(true)\n  const [url, setUrl] = useState('')\n\n  useEffect(() => {\n    const img = new window.Image()\n\n    const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n    const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n    img.src = `https://source.unsplash.com/random/${width}x${height}`\n    img.onload = () => setLoading(false)\n\n    setUrl(img.src)\n  }, [])\n\n  const classes = ['background']\n  loading && classes.push('loading')\n\n  return (\n    <div className={classes.join(' ')}>\n      <img src={url} alt='Unsplash photos' />\n    </div>\n  )\n}\n","import React from 'react'\n\nimport Logo from './Logo'\nimport Heading from './Heading'\nimport Navigation from './Navigation'\nimport Background from './Background'\n\nconst siteMetadata = {\n  title: 'Hey! Guys',\n  slogan: 'I\\'m Lei Wang, a technical poet of China',\n  links: [\n    { text: 'Weibo', href: 'https://weibo.com/zceme', target: '_blank' },\n    { text: 'WeChat', href: 'https://img.zce.me/wechat.jpg', target: '_blank' },\n    { text: 'Blog', href: 'https://blog.zce.me', target: '_blank' },\n    { text: 'GitHub', href: 'https://github.com/zce', target: '_blank' },\n    { text: 'Email', href: 'mailto:w@zce.me', target: '_self' },\n    { text: 'Discuss', href: 'https://github.com/zce/discuss/issues', target: '_blank' }\n  ]\n}\n\nexport default () => (\n  <>\n    <Logo />\n    <Heading title={siteMetadata.title} slogan={siteMetadata.slogan} />\n    <Navigation links={siteMetadata.links} />\n    <Background />\n  </>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}